type CommandResponse {
  "Response code"
  code: Int
  "Response message"
  message: String
}

type GeneratorVehicle {
  "Vehicle ID"
  id: ID!
  "name"
  name: String!
  "organization id"
  organizationId: String!
  "Vehicle description"
  description: String
  "Vehicle active flag"
  active: Boolean!  
  "object metadata"
  metadata: GeneratorVehicleMetadata
}

type GeneratorVehicleMetadata {
    createdBy: String
		createdAt: BigInt
		updatedBy: String
		updatedAt: BigInt
}

# Status of the generation process
type GeneratorGenerationStatus {
  "Is generation currently running"
  isGenerating: Boolean!
  "Total number of vehicles generated"
  generatedCount: Int!
  "Current status"
  status: String!
}

# Payload for a generated vehicle event
type GeneratorVehicleData {
  "Vehicle type"
  type: String!
  "Power source"
  powerSource: String!
  "Horsepower"
  hp: Int!
  "Year"
  year: Int!
  "Top speed"
  topSpeed: Int!
}

type GeneratorVehicleGenerated {
  "Event type"
  at: String!
  "Event subtype"
  et: String!
  "Deterministic ID"
  aid: String!
  "Timestamp"
  timestamp: String!
  "Vehicle data"
  data: GeneratorVehicleData!
  "Total generated count"
  generatedCount: Int!
}

type GeneratorVehicleListing {
  "Listing"
  listing: [GeneratorVehicle]
  "query total result count"
  queryTotalResultCount: Int,  
}


input GeneratorVehicleFilterInput {
  "Name"
  name: String
  "organization id"
  organizationId: String!
  "Vehicle active flag"
  active: Boolean
}

input GeneratorVehiclePaginationInput {
  "Page"
  page: Int!
  "Count"
  count: Int!
  "query total result count flag"
  queryTotalResultCount: Boolean
}

input GeneratorVehicleSortInput {
  field: String!,
  asc: Boolean!,
}

input GeneratorVehicleInput {
  "name"
  name: String
  "organization id"
  organizationId: String!
  "Vehicle description"
  description: String
  "Vehicle active flag"
  active: Boolean
}


type Query {
  "Get Vehicles filtered "
  GeneratorVehicleListing(filterInput: GeneratorVehicleFilterInput, paginationInput: GeneratorVehiclePaginationInput, sortInput: GeneratorVehicleSortInput): GeneratorVehicleListing
  "Get Vehicle by its id"
  GeneratorVehicle(id: ID!, organizationId: String!): GeneratorVehicle
  "Get generation status"
  GeneratorGenerationStatus: GeneratorGenerationStatus
}

type Mutation {
  "Create a new Vehicle"
  GeneratorCreateVehicle(input: GeneratorVehicleInput!): GeneratorVehicle
  "Update an Vehicle"
  GeneratorUpdateVehicle(id: ID!, input: GeneratorVehicleInput!, merge: Boolean!): GeneratorVehicle  
  "Deletes an Vehicle"
  GeneratorDeleteVehicles(ids: [ID]!): CommandResponse
  "Start vehicle generation"
  GeneratorStartGeneration: CommandResponse
  "Stop vehicle generation"
  GeneratorStopGeneration: CommandResponse
}


type Subscription {
  "This events is triggered when a vehicle updated or deleted"
  GeneratorVehicleModified(id: ID!): GeneratorVehicle
  "This event is triggered when a new vehicle is generated"
  GeneratorVehicleGenerated: GeneratorVehicleGenerated
}
